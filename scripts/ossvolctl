#!/usr/bin/env python2
"""
based on http://pastebin.furver.se/0xflchkfz/
how to install: https://wiki.archlinux.org/index.php/OSS#A_simple_systray_applet
"""

import gtk
import subprocess

__author__  = "Joakim \"JockeTF\" Soderlund, Fedor \"fsqcds\" Nikolaev"
__date__    = "2011-06-09"
__license__ = "Public domain."

# Binaries to execute.
OSSMIX  = "ossmix"
OSSXMIX = "ossxmix"

# The device to control.
DEVICE = "vmix0-outvol"

# The maximum outvol volume in decibels.
MAX_DB = 50

# Sets an icon for different volume levels.
LEVELS = (
	(22, "audio-volume-high"),
	(16, "audio-volume-medium"),
	(0,  "audio-volume-low"),
	(-1, "audio-volume-muted"),
)

class StatusIcon():
	"The status icon."
	def __init__(self):
		self.icon = gtk.StatusIcon()
		
		self.icon.connect("scroll-event", self.scrollEvent)
		self.icon.connect("activate", self.clickEvent)
		
		self.set_visible = self.icon.set_visible
		
		self.update()


	def scrollEvent(self, widget, event, *args):
		"Changes the volume when the user scrolls on the volume applet."
		print "+%.1f" % self.getStep()
		if event.direction == gtk.gdk.SCROLL_UP:
			subprocess.call([OSSMIX, DEVICE, "--", "+%.1f" % self.getStep()])
			
		elif event.direction == gtk.gdk.SCROLL_DOWN:
			subprocess.call([OSSMIX, DEVICE, "--", "-%.1f" % self.getStep()])

		self.update()


	def clickEvent(self, widget, *args):
		"Starts or closes ossxmix when the volume applet is clicked."
#		if not hasattr(self, "ossxmix"):
#			self.ossxmix = subprocess.Popen([OSSXMIX, "-S"])
#		else:
#			if self.ossxmix.poll() == None:
#				self.ossxmix.terminate()
#			else:
#				self.ossxmix = subprocess.Popen([OSSXMIX, "-S"])
		subprocess.call([OSSMIX, "jack.green.mute", "TOGGLE"]);
		subprocess.call([OSSMIX, "jack.fp-green.mute", "TOGGLE"]);
		
		self.update()

		
	def getVolume(self):
		"Returns the current volume in decibels as a float."
		process = subprocess.Popen([OSSMIX, DEVICE], stdout=subprocess.PIPE)
		volume = float(process.communicate()[0].split()[-2].split(':')[0])
		process.wait()
		
		return volume

	
	def getStep(self):
		"Returns the next volume step to make in decibels as a float."
		#return 2
		return (MAX_DB - self.getVolume() + 1) * 0.1


	def getIconName(self):
		"Returns the icon name for the current volume level."
		volume = self.getVolume()
		
		for level in LEVELS:
			if level[0] < volume:
				return level[1]


	def update(self, *args):
		"Updates the volume applet's tooltip and icon."
		self.icon.set_tooltip("Volume: %.1f dB" % self.getVolume())
		self.icon.set_from_icon_name(self.getIconName())


if __name__ == "__main__":
	icon = StatusIcon()
	icon.set_visible(True)
	
	try:
		gtk.main()
	except KeyboardInterrupt:
		print("")
